CREATE TABLE PUBLIC.user_settings (
id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	email varchar not null,
	username varchar not null,
	pwd varchar not null,
	lanid varchar not null,
	roles varchar not null,
	is_deleted BOOLEAN not null,
	created_ts timestamp not null,
	last_updated_ts timestamp not null,
	constraint user_pk primary key (id)
);


CREATE TABLE PUBLIC.app_settings  (
id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	from_date date not null,
	to_date date not null,
	occupancy_percentage int4 not null,
	total_seat int4 not null,
	is_deleted BOOLEAN not null,
	created_ts timestamp not null,
	last_updated_ts timestamp not null,
	constraint app_settings_pk primary key (id)
);


CREATE TABLE PUBLIC.booking  (
id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	book_Date date not null,
	number_Seats int4 not null,
	user_id int4 not null,
	is_deleted BOOLEAN not null,
	status int4 not null,
	created_ts timestamp not null,
	last_updated_ts timestamp not null,
	constraint booking_pk primary key (id),
	constraint booking_user_fk foreign key(user_id) references user_settings(id)
);

create view vw_booking as 
select BOOKED.BOOK_DATE as BOOKED_DATE,
sum(BOOKED.number_seats) as TOTAL_BOOKED,
((app_settings.occupancy_percentage * APP_SETTINGS.total_seat)/100)  as TOTAL_SEATS,
(((app_settings.occupancy_percentage * APP_SETTINGS.total_seat)/100) -  (sum(booked.number_seats)) ) as TOTAL_AVAILABLE
from public.booking BOOKED inner join app_settings APP_SETTINGS
on booked.IS_DELETED= false and booked .STATUS in (0,1)
and APP_SETTINGS.is_deleted = false 
and booked.BOOK_DATE between APP_SETTINGS.FROM_DATE and APP_SETTINGS.to_date
group by BOOKED.BOOK_DATE,TOTAL_SEATS
order by BOOKED_DATE ASC; 

CREATE TABLE PUBLIC.ref_operation  (
id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	operation varchar not null,
	is_deleted BOOLEAN not null,
	created_ts timestamp not null,
	last_updated_ts timestamp not null,
	constraint operation_pk primary key (id)
);

insert into public.ref_operation (id,operation,is_deleted,created_ts,last_updated_ts)
values (1,'Check-in',false,now(),now());
insert into public.ref_operation (id,operation,is_deleted,created_ts,last_updated_ts)
values (2,'Check-out',false,now(),now());

CREATE TABLE PUBLIC.checkin  (
id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	book_Date date not null,
	user_id int4 not null,
	ref_operation_id int4 not null,
	is_deleted BOOLEAN not null,
	created_ts timestamp not null,
	last_updated_ts timestamp not null,
	constraint checkin_pk primary key (id),
	constraint checkin_operation_fk foreign key(ref_operation_id) references ref_operation(id),
	constraint checkin_user_fk foreign key(user_id) references user_settings(id)
);


CREATE TABLE PUBLIC.user_map  (
id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	user_id_usr int4 not null,
	user_id_admin int4 not null,
	is_deleted BOOLEAN not null,
	created_ts timestamp not null,
	last_updated_ts timestamp not null,
	constraint user_map_pk primary key (id),
	constraint user_usr_fk foreign key(user_id_usr) references user_settings(id),
	constraint user_admin_fk foreign key(user_id_admin) references user_settings(id)
);


create view vw_booking_admin_dash as
select b.id as id, b.book_date as book_date, b.number_seats as number_seats,b.user_id as user_id,
b.is_deleted as is_deleted ,b.status as status,
um.user_id_admin as admin_id
from public.booking b inner join user_map um 
on b.user_id = um.user_id_usr and b.is_deleted = false and um.is_deleted = false
order by book_date desc;